use dialoguer::theme::ColorfulTheme;

pub fn get_options() -> Vec<&'static str> {
    let options = vec![
        "    No gitmoji",
        "🎨  Improve structure / format of the code.",
        "⚡️  Improve performance.",
        "🔥  Remove code or files.",
        "🐛  Fix a bug.",
        "🚑️  Critical hotfix.",
        "✨  Introduce new features.",
        "📝  Add or update documentation.",
        "🚀  Deploy stuff.",
        "💄  Add or update the UI and style files.",
        "🎉  Begin a project.",
        "✅  Add, update, or pass tests.",
        "🔒️  Fix security issues.",
        "🔐  Add or update secrets.",
        "🔖  Release / Version tags.",
        "🚨  Fix compiler / linter warnings.",
        "🚧  Work in progress.",
        "💚  Fix CI Build.",
        "⬇️   Downgrade dependencies.",
        "⬆️   Upgrade dependencies.",
        "📌  Pin dependencies to specific versions.",
        "👷  Add or update CI build system.",
        "📈  Add or update analytics or track code.",
        "♻️   Refactor code.",
        "➕  Add a dependency.",
        "➖  Remove a dependency.",
        "🔧  Add or update configuration files.",
        "🔨  Add or update development scripts.",
        "🌐  Internationalization and localization.",
        "✏️   Fix typos.",
        "💩  Write bad code that needs to be improved.",
        "⏪️  Revert changes.",
        "🔀  Merge branches.",
        "📦️  Add or update compiled files or packages.",
        "👽️  Update code due to external API changes.",
        "🚚  Move or rename resources (e.g.: files, paths, routes).",
        "📄  Add or update license.",
        "💥  Introduce breaking changes.",
        "🍱  Add or update assets.",
        "♿️  Improve accessibility.",
        "💡  Add or update comments in source code.",
        "🍻  Write code drunkenly.",
        "💬  Add or update text and literals.",
        "🗃️   Perform database related changes.",
        "🔊  Add or update logs.",
        "🔇  Remove logs.",
        "👥  Add or update contributor(s).",
        "🚸  Improve user experience / usability.",
        "🏗️   Make architectural changes.",
        "📱  Work on responsive design.",
        "🤡  Mock things.",
        "🥚  Add or update an easter egg.",
        "🙈  Add or update a .gitignore file.",
        "📸  Add or update snapshots.",
        "⚗️   Perform experiments.",
        "🔍️  Improve SEO.",
        "🏷️   Add or update types.",
        "🌱  Add or update seed files.",
        "🚩  Add, update, or remove feature flags.",
        "🥅  Catch errors.",
        "💫  Add or update animations and transitions.",
        "🗑️   Deprecate code that needs to be cleaned up.",
        "🛂  Work on code related to authorization, roles and permissions.",
        "🩹  Simple fix for a non-critical issue.",
        "🧐  Data exploration/inspection.",
        "⚰️   Remove dead code.",
        "🧪  Add a failing test.",
        "👔  Add or update business logic.",
        "🩺  Add or update healthcheck.",
        "🧱  Infrastructure related changes.",
        "🧑‍💻  Improve developer experience.",
        "💸  Add sponsorships or money related infrastructure.",
        "🧵  Add or update code related to multithreading or concurrency.",
        "🦺  Add or update code related to validation.",
    ];
    options
}

pub fn get_value(index: usize) -> String {
    let codes = vec![
        "",
        ":art:",
        ":zap:",
        ":fire:",
        ":bug:",
        ":ambulance:",
        ":sparkles:",
        ":memo:",
        ":rocket:",
        ":lipstick:",
        ":tada:",
        ":white_check_mark:",
        ":lock:",
        ":closed_lock_with_key:",
        ":bookmark:",
        ":rotating_light:",
        ":construction:",
        ":green_heart:",
        ":arrow_down:",
        ":arrow_up:",
        ":pushpin:",
        ":construction_worker:",
        ":chart_with_upwards_trend:",
        ":recycle:",
        ":heavy_plus_sign:",
        ":heavy_minus_sign:",
        ":wrench:",
        ":hammer:",
        ":globe_with_meridians:",
        ":pencil2:",
        ":poop:",
        ":rewind:",
        ":twisted_rightwards_arrows:",
        ":package:",
        ":alien:",
        ":truck:",
        ":page_facing_up:",
        ":boom:",
        ":bento:",
        ":wheelchair:",
        ":bulb:",
        ":beers:",
        ":speech_balloon:",
        ":card_file_box:",
        ":loud_sound:",
        ":mute:",
        ":busts_in_silhouette:",
        ":children_crossing:",
        ":building_construction:",
        ":iphone:",
        ":clown_face:",
        ":egg:",
        ":see_no_evil:",
        ":camera_flash:",
        ":alembic:",
        ":mag:",
        ":label:",
        ":seedling:",
        ":triangular_flag_on_post:",
        ":goal_net:",
        ":dizzy:",
        ":wastebasket:",
        ":passport_control:",
        ":adhesive_bandage:",
        ":monocle_face:",
        ":coffin:",
        ":test_tube:",
        ":necktie:",
        ":stethoscope:",
        ":bricks:",
        ":technologist:",
        ":money_with_wings:",
        ":thread:",
        ":safety_vest:",
    ];

    codes[index].to_string()
}

pub fn select(theme: &ColorfulTheme) -> String {
    let options = get_options();
    let selected = dialoguer::FuzzySelect::with_theme(theme)
        .with_prompt("Select an emoji")
        .items(&options)
        .default(0)
        .max_length(12)
        .interact()
        .unwrap();

    get_value(selected)
}
